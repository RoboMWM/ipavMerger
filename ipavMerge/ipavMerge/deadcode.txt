So apparently YAML can be funky and such, and since my code was expecting it to be in some sort of exact layout...
Basically, it fails if there's any sort of "escaped" YAML stuff or whatever.

static List<Parent> listLoader(StreamReader file)
        {
            int key = 0;
            List<Parent> leList = new List<Parent>();
            String line = file.ReadLine();
            while (line != null) //redundant because yolo
            {
                String parent = line;
                line = file.ReadLine();
                List<Child> child = new List<Child>();
                //Stupid code incoming
                while (line.Substring(0,1).Equals("-"))
                {
                    String[] stupid = line.Split('\"');
                    key++;
                    Console.WriteLine(stupid.Length + " key: " + key);
                    child.Add(new Child(stupid[0], 
                        stupid[1],
                        stupid[2],
                        stupid[3],
                        stupid[4],
                        stupid[5],
                        stupid[6],
                        stupid[7]));
                    line = file.ReadLine();
                    if (line == null)
                        break;
                }
                leList.Add(new Parent(parent, child));
            }
            return leList;
        }

StreamReader loggedAddresses1 = new StreamReader(path1 + "loggedAddresses.ipav");
            List<Parent> ListAddresses1 = listLoader(loggedAddresses1);
            Console.WriteLine("loggedAddresses.ipav contains: ");
            Action<Parent> print = link =>
           {
               Console.WriteLine(link);
           };
            ListAddresses1.ForEach(print);

----------------STUPID---------------

                    //Create stupid
                    Directory.CreateDirectory(path1 + "loggedAddresses1");
                    Directory.CreateDirectory(path1 + "loggedPlayers1");
                    Directory.CreateDirectory(path1 + "loggedUUIDs1");
                    Directory.CreateDirectory(path2 + "loggedAddresses2");
                    Directory.CreateDirectory(path2 + "loggedPlayers2");
                    Directory.CreateDirectory(path2 + "loggedUUIDs2");

            //Start of stupid code
            makeMess(loggedAddresses1, path1 + "loggedAddresses1\\");
            makeMess(loggedPlayers1, path1 + "loggedPlayers1\\");
            makeMess(loggedUUIDs1, path1 + "loggedUUIDs1\\");
            makeMess(loggedAddresses2, path2 + "loggedAddresses2\\");
            makeMess(loggedPlayers2, path2 + "loggedPlayers2\\");
            makeMess(loggedUUIDs2, path2 + "loggedUUIDs2\\");

        //Stupid code rendition:
        static void makeMess(StreamReader file, String path)
        {
            String line = file.ReadLine();
            while (line != null) //redundant because yolo
            {
                String parent = "";
                if (line.Substring(0, 1).Equals("'"))
                {
                    int secondQuotationMark = line.IndexOf("'", 2);
                    parent = line.Substring(1, secondQuotationMark - 1);
                }
                else
                {
                    int colon = line.IndexOf(":", 1);
                    parent = line.Substring(0, colon);
                }
                line = file.ReadLine();
                //Stupid code incoming
                while (line.Substring(0, 1).Equals("-"))
                {
                    String[] stupid = line.Split('\"');
                    //Check for keys split into more than one line
                    if (stupid.Length < 8)
                    {
                        String firstLine = line;
                        line = file.ReadLine();
                        using (StreamWriter leFile = new StreamWriter(path + parent, true))
                        {
                            leFile.WriteLine(firstLine);
                            leFile.WriteLine(line);
                        }
                    }
                    else
                    {
                        using (StreamWriter leFile = new StreamWriter(path + parent, true))
                        {
                            leFile.WriteLine(line);
                        }
                    }
                    

                    line = file.ReadLine();
                    if (line == null)
                        break;
                }
            }
        }